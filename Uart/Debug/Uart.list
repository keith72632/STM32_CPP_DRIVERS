
Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005e0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000788  08000788  00010788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007bc  080007bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080007bc  080007bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007bc  080007bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007bc  080007bc  000107bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007c0  080007c0  000107c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080007c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000002c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000025c1  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000075f  00000000  00000000  0002265b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00022dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00022e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a95  00000000  00000000  00022f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001259  00000000  00000000  0002599d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a1d3  00000000  00000000  00026bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00030dc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003c8  00000000  00000000  00030e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000070 	.word	0x20000070
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000770 	.word	0x08000770

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000074 	.word	0x20000074
 80001e4:	08000770 	.word	0x08000770

080001e8 <_Z8init_ledv>:
uint32_t volatile *rcc = (uint32_t*)RCC_AHB1;
uint32_t volatile *mode = (uint32_t*)0x40020c00;
uint32_t volatile *odr = (uint32_t*)0x40020c14;

void init_led()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	*rcc |= (1 << 3);
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <_Z8init_ledv+0x2c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <_Z8init_ledv+0x2c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f042 0208 	orr.w	r2, r2, #8
 80001fa:	601a      	str	r2, [r3, #0]
	*mode |= (1 << 30);
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <_Z8init_ledv+0x30>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <_Z8init_ledv+0x30>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	20000000 	.word	0x20000000
 8000218:	20000004 	.word	0x20000004

0800021c <_Z10toggle_ledv>:

void toggle_led()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	*odr ^= (1 << 15);
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <_Z10toggle_ledv+0x1c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <_Z10toggle_ledv+0x1c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	20000008 	.word	0x20000008

0800023c <main>:

int main(void)
{
 800023c:	b5b0      	push	{r4, r5, r7, lr}
 800023e:	b096      	sub	sp, #88	; 0x58
 8000240:	af00      	add	r7, sp, #0
	init_led();
 8000242:	f7ff ffd1 	bl	80001e8 <_Z8init_ledv>

	Usart ustream = Usart(USART3);
 8000246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800024a:	2102      	movs	r1, #2
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f84b 	bl	80002e8 <_ZN5UsartC1E7USART_t>
	ustream.init_clocks();
 8000252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f8ca 	bl	80003f0 <_ZN5Usart11init_clocksEv>
	ustream.config_gpio();
 800025c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f905 	bl	8000470 <_ZN5Usart11config_gpioEv>
	ustream.config_usart();
 8000266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f933 	bl	80004d6 <_ZN5Usart12config_usartEv>
	char s[] = "shell>\r\n";
 8000270:	4a1a      	ldr	r2, [pc, #104]	; (80002dc <main+0xa0>)
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	ca07      	ldmia	r2, {r0, r1, r2}
 8000278:	c303      	stmia	r3!, {r0, r1}
 800027a:	701a      	strb	r2, [r3, #0]
	ustream.puts(s);
 800027c:	f107 0218 	add.w	r2, r7, #24
 8000280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000284:	4611      	mov	r1, r2
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f959 	bl	800053e <_ZN5Usart4putsEPc>
	for(int i = 0; i < 1000000; i++){};
 800028c:	2300      	movs	r3, #0
 800028e:	657b      	str	r3, [r7, #84]	; 0x54
 8000290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000292:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <main+0xa4>)
 8000294:	4293      	cmp	r3, r2
 8000296:	dc03      	bgt.n	80002a0 <main+0x64>
 8000298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800029a:	3301      	adds	r3, #1
 800029c:	657b      	str	r3, [r7, #84]	; 0x54
 800029e:	e7f7      	b.n	8000290 <main+0x54>

	while(1){
		char msg[] = "after button press\n\r";
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <main+0xa8>)
 80002a2:	463c      	mov	r4, r7
 80002a4:	461d      	mov	r5, r3
 80002a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002ae:	6020      	str	r0, [r4, #0]
 80002b0:	3404      	adds	r4, #4
 80002b2:	7021      	strb	r1, [r4, #0]
		uint32_t data = ustream.get();
 80002b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f967 	bl	800058c <_ZN5Usart3getEv>
 80002be:	6538      	str	r0, [r7, #80]	; 0x50
		if(data)
 80002c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <main+0x8e>
			toggle_led();
 80002c6:	f7ff ffa9 	bl	800021c <_Z10toggle_ledv>
		ustream.puts(msg);
 80002ca:	463a      	mov	r2, r7
 80002cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f933 	bl	800053e <_ZN5Usart4putsEPc>
	};
 80002d8:	e7e2      	b.n	80002a0 <main+0x64>
 80002da:	bf00      	nop
 80002dc:	08000788 	.word	0x08000788
 80002e0:	000f423f 	.word	0x000f423f
 80002e4:	08000794 	.word	0x08000794

080002e8 <_ZN5UsartC1E7USART_t>:
 */

#include <usart.h>
#include "stm32f407xx.h"

Usart::Usart(USART_t usart) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
 80002f4:	4a2e      	ldr	r2, [pc, #184]	; (80003b0 <_ZN5UsartC1E7USART_t+0xc8>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->_usart = usart;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	78fa      	ldrb	r2, [r7, #3]
 80002fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	switch(usart)
 8000302:	78fb      	ldrb	r3, [r7, #3]
 8000304:	2b05      	cmp	r3, #5
 8000306:	d849      	bhi.n	800039c <_ZN5UsartC1E7USART_t+0xb4>
 8000308:	a201      	add	r2, pc, #4	; (adr r2, 8000310 <_ZN5UsartC1E7USART_t+0x28>)
 800030a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030e:	bf00      	nop
 8000310:	08000329 	.word	0x08000329
 8000314:	08000331 	.word	0x08000331
 8000318:	08000363 	.word	0x08000363
 800031c:	0800039d 	.word	0x0800039d
 8000320:	0800039d 	.word	0x0800039d
 8000324:	08000395 	.word	0x08000395
	{
	case USART1:
		this->_rcc_usart = (uint32_t*)RCC_USART1;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <_ZN5UsartC1E7USART_t+0xcc>)
 800032c:	605a      	str	r2, [r3, #4]
		break;
 800032e:	e038      	b.n	80003a2 <_ZN5UsartC1E7USART_t+0xba>
	case USART2:
		this->_rcc_usart = (uint32_t*)RCC_USART2;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <_ZN5UsartC1E7USART_t+0xd0>)
 8000334:	605a      	str	r2, [r3, #4]
		this->_rcc_gpio = (uint32_t*)RCC_GPIOA;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a20      	ldr	r2, [pc, #128]	; (80003bc <_ZN5UsartC1E7USART_t+0xd4>)
 800033a:	609a      	str	r2, [r3, #8]
		this->_gpio_mode = (uint32_t*)GPIOA_MODE;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a20      	ldr	r2, [pc, #128]	; (80003c0 <_ZN5UsartC1E7USART_t+0xd8>)
 8000340:	60da      	str	r2, [r3, #12]
		this->_gpio_aflr = (uint32_t*)GPIOA_AFLR;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <_ZN5UsartC1E7USART_t+0xdc>)
 8000346:	611a      	str	r2, [r3, #16]
		this->_usart_cr1 = (uint32_t*)USART2_CR1;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a1f      	ldr	r2, [pc, #124]	; (80003c8 <_ZN5UsartC1E7USART_t+0xe0>)
 800034c:	619a      	str	r2, [r3, #24]
		this->_usart_brr = (uint32_t*)USART2_BRR;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <_ZN5UsartC1E7USART_t+0xe4>)
 8000352:	61da      	str	r2, [r3, #28]
		this->_usart_sr = (uint32_t*)USART2_SR;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a1e      	ldr	r2, [pc, #120]	; (80003d0 <_ZN5UsartC1E7USART_t+0xe8>)
 8000358:	621a      	str	r2, [r3, #32]
		this->_usart_dr = (uint32_t*)USART2_DR;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <_ZN5UsartC1E7USART_t+0xec>)
 800035e:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000360:	e01f      	b.n	80003a2 <_ZN5UsartC1E7USART_t+0xba>
	case USART3:
		this->_rcc_usart = (uint32_t*)RCC_USART3;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <_ZN5UsartC1E7USART_t+0xd0>)
 8000366:	605a      	str	r2, [r3, #4]
		this->_rcc_gpio = (uint32_t*)RCC_GPIOC;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a14      	ldr	r2, [pc, #80]	; (80003bc <_ZN5UsartC1E7USART_t+0xd4>)
 800036c:	609a      	str	r2, [r3, #8]
		this->_gpio_mode = (uint32_t*)GPIOC_MODE;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a19      	ldr	r2, [pc, #100]	; (80003d8 <_ZN5UsartC1E7USART_t+0xf0>)
 8000372:	60da      	str	r2, [r3, #12]
		this->_gpio_afhr = (uint32_t*)GPIOC_AFHR;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a19      	ldr	r2, [pc, #100]	; (80003dc <_ZN5UsartC1E7USART_t+0xf4>)
 8000378:	615a      	str	r2, [r3, #20]
		this->_usart_cr1 = (uint32_t*)USART3_CR1;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <_ZN5UsartC1E7USART_t+0xf8>)
 800037e:	619a      	str	r2, [r3, #24]
		this->_usart_brr = (uint32_t*)USART3_BRR;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a18      	ldr	r2, [pc, #96]	; (80003e4 <_ZN5UsartC1E7USART_t+0xfc>)
 8000384:	61da      	str	r2, [r3, #28]
		this->_usart_sr = (uint32_t*)USART3_SR;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a17      	ldr	r2, [pc, #92]	; (80003e8 <_ZN5UsartC1E7USART_t+0x100>)
 800038a:	621a      	str	r2, [r3, #32]
		this->_usart_dr = (uint32_t*)USART3_DR;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a17      	ldr	r2, [pc, #92]	; (80003ec <_ZN5UsartC1E7USART_t+0x104>)
 8000390:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000392:	e006      	b.n	80003a2 <_ZN5UsartC1E7USART_t+0xba>
	case USART6:
		this->_rcc_usart = (uint32_t*)RCC_USART6;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <_ZN5UsartC1E7USART_t+0xcc>)
 8000398:	605a      	str	r2, [r3, #4]
		break;
 800039a:	e002      	b.n	80003a2 <_ZN5UsartC1E7USART_t+0xba>
	default:
		this->_rcc_usart = NULL;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
	}
}
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	080007b4 	.word	0x080007b4
 80003b4:	40023844 	.word	0x40023844
 80003b8:	40023840 	.word	0x40023840
 80003bc:	40023830 	.word	0x40023830
 80003c0:	40020000 	.word	0x40020000
 80003c4:	40020020 	.word	0x40020020
 80003c8:	4000440c 	.word	0x4000440c
 80003cc:	40004408 	.word	0x40004408
 80003d0:	40004400 	.word	0x40004400
 80003d4:	40004404 	.word	0x40004404
 80003d8:	40020800 	.word	0x40020800
 80003dc:	40020824 	.word	0x40020824
 80003e0:	4000480c 	.word	0x4000480c
 80003e4:	40004808 	.word	0x40004808
 80003e8:	40004800 	.word	0x40004800
 80003ec:	40004804 	.word	0x40004804

080003f0 <_ZN5Usart11init_clocksEv>:

void Usart::init_clocks(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	switch(this->_usart)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d020      	beq.n	8000444 <_ZN5Usart11init_clocksEv+0x54>
 8000402:	2b02      	cmp	r3, #2
 8000404:	dc2e      	bgt.n	8000464 <_ZN5Usart11init_clocksEv+0x74>
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <_ZN5Usart11init_clocksEv+0x20>
 800040a:	2b01      	cmp	r3, #1
 800040c:	d009      	beq.n	8000422 <_ZN5Usart11init_clocksEv+0x32>
		break;
	case USART3:
		*_rcc_usart |= 1 << 18;
		*_rcc_gpio |= 1 << 2;
	default:
		break;
 800040e:	e029      	b.n	8000464 <_ZN5Usart11init_clocksEv+0x74>
		*_rcc_usart |= 1 << 4;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f042 0210 	orr.w	r2, r2, #16
 800041e:	601a      	str	r2, [r3, #0]
		break;
 8000420:	e021      	b.n	8000466 <_ZN5Usart11init_clocksEv+0x76>
		*_rcc_usart |= 1 << 17;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000430:	601a      	str	r2, [r3, #0]
		*_rcc_gpio |= 1 << 0;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	f042 0201 	orr.w	r2, r2, #1
 8000440:	601a      	str	r2, [r3, #0]
		break;
 8000442:	e010      	b.n	8000466 <_ZN5Usart11init_clocksEv+0x76>
		*_rcc_usart |= 1 << 18;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000452:	601a      	str	r2, [r3, #0]
		*_rcc_gpio |= 1 << 2;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f042 0204 	orr.w	r2, r2, #4
 8000462:	601a      	str	r2, [r3, #0]
		break;
 8000464:	bf00      	nop
	}
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <_ZN5Usart11config_gpioEv>:

void Usart::config_gpio()
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	switch(this->_usart)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800047e:	2b01      	cmp	r3, #1
 8000480:	d002      	beq.n	8000488 <_ZN5Usart11config_gpioEv+0x18>
 8000482:	2b02      	cmp	r3, #2
 8000484:	d011      	beq.n	80004aa <_ZN5Usart11config_gpioEv+0x3a>
		*_gpio_mode |= 2 << 20 | 2 << 22;
		*_gpio_afhr |= 7 << 8 | 7 << 12;
		break;
	}

}
 8000486:	e021      	b.n	80004cc <_ZN5Usart11config_gpioEv+0x5c>
		*_gpio_mode |= 2 << 4 | 2 << 6;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8000496:	601a      	str	r2, [r3, #0]
		*_gpio_aflr |= 7 << 8 | 7 << 12;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	691b      	ldr	r3, [r3, #16]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 80004a6:	601a      	str	r2, [r3, #0]
		break;
 80004a8:	e010      	b.n	80004cc <_ZN5Usart11config_gpioEv+0x5c>
		*_gpio_mode |= 2 << 20 | 2 << 22;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	f442 0220 	orr.w	r2, r2, #10485760	; 0xa00000
 80004b8:	601a      	str	r2, [r3, #0]
		*_gpio_afhr |= 7 << 8 | 7 << 12;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 80004c8:	601a      	str	r2, [r3, #0]
		break;
 80004ca:	bf00      	nop
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <_ZN5Usart12config_usartEv>:

void Usart::config_usart()
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
	*_usart_brr = 0x0683;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f240 6283 	movw	r2, #1667	; 0x683
 80004e6:	601a      	str	r2, [r3, #0]
	*_usart_cr1 |= 1 << 2 | 1 << 3 | 1 << 13;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	6992      	ldr	r2, [r2, #24]
 80004f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004f6:	f043 030c 	orr.w	r3, r3, #12
 80004fa:	6013      	str	r3, [r2, #0]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <_ZN5Usart3putEc>:

void Usart::put(char c)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
	while(!(*_usart_sr & 0x0080)){};
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6a1b      	ldr	r3, [r3, #32]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf0c      	ite	eq
 8000520:	2301      	moveq	r3, #1
 8000522:	2300      	movne	r3, #0
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <_ZN5Usart3putEc+0x26>
 800052a:	e7f2      	b.n	8000512 <_ZN5Usart3putEc+0xc>
	*_usart_dr = c;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000530:	78fa      	ldrb	r2, [r7, #3]
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <_ZN5Usart4putsEPc>:

void Usart::puts(char *s)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
	if(*s)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00c      	beq.n	800056a <_ZN5Usart4putsEPc+0x2c>
	{
		this->put(*s);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f7ff ffd5 	bl	8000506 <_ZN5Usart3putEc>
		this->puts(s+=1);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	3301      	adds	r3, #1
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	6839      	ldr	r1, [r7, #0]
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff ffea 	bl	800053e <_ZN5Usart4putsEPc>
	}
	while(!(*_usart_sr & 0x0040)){};
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6a1b      	ldr	r3, [r3, #32]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000574:	2b00      	cmp	r3, #0
 8000576:	bf0c      	ite	eq
 8000578:	2301      	moveq	r3, #1
 800057a:	2300      	movne	r3, #0
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d000      	beq.n	8000584 <_ZN5Usart4putsEPc+0x46>
 8000582:	e7f2      	b.n	800056a <_ZN5Usart4putsEPc+0x2c>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <_ZN5Usart3getEv>:

uint32_t Usart::get()
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	while(!(*_usart_sr & (1 << 5)));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f003 0320 	and.w	r3, r3, #32
 800059e:	2b00      	cmp	r3, #0
 80005a0:	bf0c      	ite	eq
 80005a2:	2301      	moveq	r3, #1
 80005a4:	2300      	movne	r3, #0
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d000      	beq.n	80005ae <_ZN5Usart3getEv+0x22>
 80005ac:	e7f2      	b.n	8000594 <_ZN5Usart3getEv+0x8>
	temp = *_usart_dr;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60fb      	str	r3, [r7, #12]
	return temp;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
	...

080005c4 <_ZN5UsartD1Ev>:
Usart::~Usart() {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <_ZN5UsartD1Ev+0x1c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	080007b4 	.word	0x080007b4

080005e4 <_ZN5UsartD0Ev>:
Usart::~Usart() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
}
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffe9 	bl	80005c4 <_ZN5UsartD1Ev>
 80005f2:	212c      	movs	r1, #44	; 0x2c
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f82e 	bl	8000656 <_ZdlPvj>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000606:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000608:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <LoopForever+0x6>)
  ldr r1, =_edata
 800060e:	490d      	ldr	r1, [pc, #52]	; (8000644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <LoopForever+0xe>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000624:	4c0a      	ldr	r4, [pc, #40]	; (8000650 <LoopForever+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000632:	f000 f815 	bl	8000660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000636:	f7ff fe01 	bl	800023c <main>

0800063a <LoopForever>:

LoopForever:
    b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   r0, =_estack
 800063c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000648:	080007c4 	.word	0x080007c4
  ldr r2, =_sbss
 800064c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000650:	2000009c 	.word	0x2000009c

08000654 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC_IRQHandler>

08000656 <_ZdlPvj>:
 8000656:	f000 b800 	b.w	800065a <_ZdlPv>

0800065a <_ZdlPv>:
 800065a:	f000 b825 	b.w	80006a8 <free>
	...

08000660 <__libc_init_array>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	4d0d      	ldr	r5, [pc, #52]	; (8000698 <__libc_init_array+0x38>)
 8000664:	4c0d      	ldr	r4, [pc, #52]	; (800069c <__libc_init_array+0x3c>)
 8000666:	1b64      	subs	r4, r4, r5
 8000668:	10a4      	asrs	r4, r4, #2
 800066a:	2600      	movs	r6, #0
 800066c:	42a6      	cmp	r6, r4
 800066e:	d109      	bne.n	8000684 <__libc_init_array+0x24>
 8000670:	4d0b      	ldr	r5, [pc, #44]	; (80006a0 <__libc_init_array+0x40>)
 8000672:	4c0c      	ldr	r4, [pc, #48]	; (80006a4 <__libc_init_array+0x44>)
 8000674:	f000 f87c 	bl	8000770 <_init>
 8000678:	1b64      	subs	r4, r4, r5
 800067a:	10a4      	asrs	r4, r4, #2
 800067c:	2600      	movs	r6, #0
 800067e:	42a6      	cmp	r6, r4
 8000680:	d105      	bne.n	800068e <__libc_init_array+0x2e>
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f855 3b04 	ldr.w	r3, [r5], #4
 8000688:	4798      	blx	r3
 800068a:	3601      	adds	r6, #1
 800068c:	e7ee      	b.n	800066c <__libc_init_array+0xc>
 800068e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000692:	4798      	blx	r3
 8000694:	3601      	adds	r6, #1
 8000696:	e7f2      	b.n	800067e <__libc_init_array+0x1e>
 8000698:	080007bc 	.word	0x080007bc
 800069c:	080007bc 	.word	0x080007bc
 80006a0:	080007bc 	.word	0x080007bc
 80006a4:	080007c0 	.word	0x080007c0

080006a8 <free>:
 80006a8:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <free+0xc>)
 80006aa:	4601      	mov	r1, r0
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	f000 b803 	b.w	80006b8 <_free_r>
 80006b2:	bf00      	nop
 80006b4:	2000000c 	.word	0x2000000c

080006b8 <_free_r>:
 80006b8:	b538      	push	{r3, r4, r5, lr}
 80006ba:	4605      	mov	r5, r0
 80006bc:	2900      	cmp	r1, #0
 80006be:	d045      	beq.n	800074c <_free_r+0x94>
 80006c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80006c4:	1f0c      	subs	r4, r1, #4
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bfb8      	it	lt
 80006ca:	18e4      	addlt	r4, r4, r3
 80006cc:	f000 f842 	bl	8000754 <__malloc_lock>
 80006d0:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <_free_r+0x98>)
 80006d2:	6813      	ldr	r3, [r2, #0]
 80006d4:	4610      	mov	r0, r2
 80006d6:	b933      	cbnz	r3, 80006e6 <_free_r+0x2e>
 80006d8:	6063      	str	r3, [r4, #4]
 80006da:	6014      	str	r4, [r2, #0]
 80006dc:	4628      	mov	r0, r5
 80006de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80006e2:	f000 b83d 	b.w	8000760 <__malloc_unlock>
 80006e6:	42a3      	cmp	r3, r4
 80006e8:	d90b      	bls.n	8000702 <_free_r+0x4a>
 80006ea:	6821      	ldr	r1, [r4, #0]
 80006ec:	1862      	adds	r2, r4, r1
 80006ee:	4293      	cmp	r3, r2
 80006f0:	bf04      	itt	eq
 80006f2:	681a      	ldreq	r2, [r3, #0]
 80006f4:	685b      	ldreq	r3, [r3, #4]
 80006f6:	6063      	str	r3, [r4, #4]
 80006f8:	bf04      	itt	eq
 80006fa:	1852      	addeq	r2, r2, r1
 80006fc:	6022      	streq	r2, [r4, #0]
 80006fe:	6004      	str	r4, [r0, #0]
 8000700:	e7ec      	b.n	80006dc <_free_r+0x24>
 8000702:	461a      	mov	r2, r3
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	b10b      	cbz	r3, 800070c <_free_r+0x54>
 8000708:	42a3      	cmp	r3, r4
 800070a:	d9fa      	bls.n	8000702 <_free_r+0x4a>
 800070c:	6811      	ldr	r1, [r2, #0]
 800070e:	1850      	adds	r0, r2, r1
 8000710:	42a0      	cmp	r0, r4
 8000712:	d10b      	bne.n	800072c <_free_r+0x74>
 8000714:	6820      	ldr	r0, [r4, #0]
 8000716:	4401      	add	r1, r0
 8000718:	1850      	adds	r0, r2, r1
 800071a:	4283      	cmp	r3, r0
 800071c:	6011      	str	r1, [r2, #0]
 800071e:	d1dd      	bne.n	80006dc <_free_r+0x24>
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	6053      	str	r3, [r2, #4]
 8000726:	4401      	add	r1, r0
 8000728:	6011      	str	r1, [r2, #0]
 800072a:	e7d7      	b.n	80006dc <_free_r+0x24>
 800072c:	d902      	bls.n	8000734 <_free_r+0x7c>
 800072e:	230c      	movs	r3, #12
 8000730:	602b      	str	r3, [r5, #0]
 8000732:	e7d3      	b.n	80006dc <_free_r+0x24>
 8000734:	6820      	ldr	r0, [r4, #0]
 8000736:	1821      	adds	r1, r4, r0
 8000738:	428b      	cmp	r3, r1
 800073a:	bf04      	itt	eq
 800073c:	6819      	ldreq	r1, [r3, #0]
 800073e:	685b      	ldreq	r3, [r3, #4]
 8000740:	6063      	str	r3, [r4, #4]
 8000742:	bf04      	itt	eq
 8000744:	1809      	addeq	r1, r1, r0
 8000746:	6021      	streq	r1, [r4, #0]
 8000748:	6054      	str	r4, [r2, #4]
 800074a:	e7c7      	b.n	80006dc <_free_r+0x24>
 800074c:	bd38      	pop	{r3, r4, r5, pc}
 800074e:	bf00      	nop
 8000750:	2000008c 	.word	0x2000008c

08000754 <__malloc_lock>:
 8000754:	4801      	ldr	r0, [pc, #4]	; (800075c <__malloc_lock+0x8>)
 8000756:	f000 b809 	b.w	800076c <__retarget_lock_acquire_recursive>
 800075a:	bf00      	nop
 800075c:	20000094 	.word	0x20000094

08000760 <__malloc_unlock>:
 8000760:	4801      	ldr	r0, [pc, #4]	; (8000768 <__malloc_unlock+0x8>)
 8000762:	f000 b804 	b.w	800076e <__retarget_lock_release_recursive>
 8000766:	bf00      	nop
 8000768:	20000094 	.word	0x20000094

0800076c <__retarget_lock_acquire_recursive>:
 800076c:	4770      	bx	lr

0800076e <__retarget_lock_release_recursive>:
 800076e:	4770      	bx	lr

08000770 <_init>:
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000772:	bf00      	nop
 8000774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000776:	bc08      	pop	{r3}
 8000778:	469e      	mov	lr, r3
 800077a:	4770      	bx	lr

0800077c <_fini>:
 800077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077e:	bf00      	nop
 8000780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000782:	bc08      	pop	{r3}
 8000784:	469e      	mov	lr, r3
 8000786:	4770      	bx	lr
